{
	"code": 200,
	"message": "成功!",
	"result": [
		{
			"id":1,
			"subject":"什么是javaScript?",
			"answer":"①‘弱类型’的脚本语言②基于‘原型’的脚本语言"
		},
		{
			"id":2,
			"subject":"JavaScript可以干什么？",
			"answer":"①主要用于web页面使用②在浏览器环境中使用"
		},
		{
			"id":3,
			"subject":"JavaScript的构成？",
			"answer":"①ECMAScript：核心语法（for if）、基本对象（数组字符串）②DOM：文档对象模型（HTML标签）③BOM：浏览器对象模型（例：检测用户使用为何浏览器）"
		},
		{
			"id":4,
			"subject":"JavaScript输出语句有？", 
			"answer":"①document.wite() => 在文档中打印 ②console.log() => 在控制台打印"
		},
		{
			"id":5,
			"subject":"在文档中打印的方法",
			"answer":"document.write();"
		},
		{ 
			"id":6,
			"subject":"变量的划分？",
			"answer":"①基本类型（string、number、boolean、undefined、null） ②引用类型（object）"
		},
		{ 
			"id":7,
			"subject":"基本类型有哪些？",
			"answer":"string、number、boolean、undefined、null"
		},
		{
			"id":8,
			"subject":"引用类型有？",
			"answer":"object"
		},
		{
			"id":9,
			"subject":"内存的生命周期？",
			"answer":"①分配期：分配所需的内存大小 ②使用期：读写操作 ③释放期：不需要时将其释放"
		},
		{
			"id":10,
			"subject":"四个字描述内存的生命周期？",
			"answer":"内存分配 =》内存使用 =》内存回收"
		},
		{
			"id":11,
			"subject":"栈内存和堆内存的区别？中栈内存",
			"answer":"①基本数据类型 ②按值访问 ③存储的值大小固定 ④系统自动分配内存空间 ⑤先进后出"
		},
		{
			"id":12,
			"subject":"栈内存和堆内存的区别？中堆内存",
			"answer":"①引用类型 ②按引用访问 ③存储大小不固定 ④由代码进行指定分配 ⑤空间大，运行效率较低 ⑥无序存储（根据引用直接获取）"
		},
		{
			"id":13,
			"subject":"定时器由哪些？",
			"answer":"①setInterval：间歇调用（只执行一次），‘后’将定时任务处理函数添加到执行队列的队尾 ②setTimeout:超时调用，‘后’将定时任务处理函数添加到执行队列的队尾"
		},
		{
			"id":14,
			"subject":"清除定时器的方法？",
			"answer":"①clearInterval(定时器变量) =》清除间歇调用 ②clearTimeout(定时器变量) =》清除超时调用"
		},
		{
			"id":15,
			"subject":"setInterval()",
			"answer":"定时器：间歇调用"
		},
		{
			"id":16,
			"subject":"setTimeout()",
			"answer":"定时器：超时调用"
		},
		{
			"id":17,
			"subject":"clearInterval",
			"answer":"清除间歇调用定时器"
		},
		{
			"id":18,
			"subject":"clearTimeout",
			"answer":"清除超时调用定时器"
		},
		{
			"id":19,
			"subject":"使用函数的好处？",
			"answer":"①复用性 ②封装性"
		},
		{
			"id":20,
			"subject":"函数声明和函数表达式的区别？ =》函数声明",
			"answer":"①函数声明只能在声明之后调用，因为这种方式的函数是在函数运行的阶段复制给变量 ②函数表达式可以在声明函数的‘作用域’范围内调用，因为这种方式是在函数解析阶段复制给函数名"
		},
		{
			"id":21,
			"subject":"函数声明与函数表达式的注意事项？",
			"answer":"①函数如果没有调用，就不会保存在内存中。 ②当函数调用完毕，其中函数的代码就会被系统内存回收。"
		},
		{
			"id":22,
			"subject":"流程控制语句为？",
			"answer":"switch"
		},
		{
			"id":23,
			"subject":"switch称为？",
			"answer":"流程控制语句"
		},
		{
			"id":24,
			"subject":"switch流程控制语句的语法？",
			"answer":"switch(表达式){case 值: 执行代码 break;  default: 执行代码}"
		},
		{
			"id":25,
			"subject":"switch与if的区别？",
			"answer":"①switch运行效率比if要快 ②if语句可以有多个条件表达式，switch只能有一个条件表达式"
		},
		{
			"id":26,
			"subject":"操作函数参数的对象为？",
			"answer":"arguments"
		},
		{
			"id":27,
			"subject":"arguments",
			"answer":"操作函数参数的对象"
		},
		{
			"id":28,
			"subject":"arguments可以操作参数的方法有？",
			"answer":"①arguments.length 获取参数个数 ②arguments[0] 获取参数的实参"
		},
		{
			"id":29,
			"subject":"匿名函数称为？",
			"answer":"没有名字的函数"
		},
		{
			"id":30,
			"subject":"没有名字的函数称为？",
			"answer":"匿名函数"
		},
		{
			"id":31,
			"subject":"匿名函数的语法",
			"answer":"(function(){})()"
		},
		{
			"id":32,
			"subject":"匿名函数为什么要在外部加()",
			"answer":"因为不符合语法要求，会报错"
		},
		{
			"id":33,
			"subject":"日期对象",
			"answer":"new Date()"
		},
		{
			"id":34,
			"subject":"new Date() 是什么？",
			"answer":"日期对象"
		},
		{
			"id":35,
			"subject":"data.getFullYear()",
			"answer":"获取当前年份"
		},
		{
			"id":36,
			"subject":"获取当前年份",
			"answer":"data.getFullYear()"
		},
		{
			"id":37,
			"subject":"data.getMonth()",
			"answer":"获取当前月份"
		},
		{
			"id":38,
			"subject":"获取当前月份",
			"answer":"data.getMonth()"
		},
		{
			"id":39,
			"subject":"data.getDate()",
			"answer":"获取当前多少号"
		},
		{
			"id":40,
			"subject":"获取当前多少号",
			"answer":"data.getDate()"
		},
		{
			"id":41,
			"subject":"获取年月日",
			"answer":"data.getFullYear();data.getMonth();data.getDate()"
		},
		{
			"id":42,
			"subject":"data.getFullYear();data.getMonth();data.getDate()",
			"answer":"获取当前年月日"
		},
		{
			"id":43,
			"subject":"data.getHours()",
			"answer":"获取当前多少时"
		},
		{
			"id":44,
			"subject":"获取当前多少时",
			"answer":"data.getHours()"
		},
		{
			"id":45,
			"subject":"data.getMinutes()",
			"answer":"获取当前分钟"
		},
		{
			"id":46,
			"subject":"获取当前分钟",
			"answer":"data.getMinutes()"
		},
		{
			"id":47,
			"subject":"获取当前多少秒",
			"answer":"data.getseconds()"
		},
		{
			"id":48,
			"subject":"获取当前时分秒",
			"answer":"data.getHours();data.getMinutes();data.getseconds()"
		},
		{
			"id":49,
			"subject":"获取当前的年月日，时分秒",
			"answer":"data.getFullYear();data.getMonth();data.getDate();data.getHours();data.getMinutes();data.getseconds()"
		},
		{
			"id":50,
			"subject":"获取当前时间戳",
			"answer":"data.getTime()"
		},
		{
			"id":51,
			"subject":"时间戳是什么？",
			"answer":"是从1970年1月1日到到至今的一串数值"
		},
		{
			"id":52,
			"subject":"null表示为",
			"answer":"无对象"
		},
		{
			"id":53,
			"subject":"undefined表示为",
			"answer":"缺少值"
		},
		{
			"id":54,
			"subject":"null转换为数值为",
			"answer":"0"
		},
		{
			"id":55,
			"subject":"undefined转换为数值为",
			"answer":"NaN"
		},
		{
			"id":56,
			"subject":"查看数据类型的方法",
			"answer":"typeof"
		},
		{
			"id":57,
			"subject":"typeof",
			"answer":"查看数据类型"
		},
		{
			"id":58,
			"subject":"Array为什么类型",
			"answer":"引用数据类型"
		},
		{
			"id":59,
			"subject":"data为什么类型",
			"answer":"引用数据类型"
		},
		{
			"id":60,
			"subject":"function为什么类型",
			"answer":"引用数据类型"
		},
		{
			"id":61,
			"subject":"有哪些数值为object类型",
			"answer":"Array、data、function"
		},
		{
			"id":62,
			"subject":"其他类型转换为字符串的方法",
			"answer":"①''+123 ②string(数据) ③数据.string() ④new string()"
		},
		{
			"id":63,
			"subject":"其他类型转换为数值类型",
			"answer":"①Number ②parseInt() ③parseFloat()"
		},
		{
			"id":64,
			"subject":"parseInt()",
			"answer":"转换为整数"
		},
		{
			"id":65,
			"subject":"parseFloat()",
			"answer":"转化为浮点数"
		},
		{
			"id":66,
			"subject":"parseInt、parseFloat、Number的区别",
			"answer":"在转换有文字的字符串时，数字前面的字符串不会被去除，而在数字后面的字符会被移除"
		},
		{
			"id":67,
			"subject":"布尔true转换成数字为？",
			"answer":"1"
		},
		{
			"id":68,
			"subject":"布尔false转换成数字为？",
			"answer":"0"
		},
		{
			"id":69,
			"subject":"字符串如果不是一个纯数字转换成数字为？",
			"answer":"NaN"
		},
		{
			"id":70,
			"subject":"NaN的解释",
			"answer":"数值类型，代表非数字值的特殊值"
		},
		{
			"id":71,
			"subject":"其他类型转换为布尔类型的方法？",
			"answer":"Boolean()"
		},
		{
			"id":72,
			"subject":"数值‘0’转换成布尔值为？",
			"answer":"false"
		},
		{
			"id":73,
			"subject":"数值‘NaN’转换成布尔值为？",
			"answer":"false"
		},
		{
			"id":74,
			"subject":"数值类型中除了0和NaN，转换成布尔值为？",
			"answer":"true"
		},
		{
			"id":75,
			"subject":"null转换成布尔类型？",
			"answer":"false"
		},
		{
			"id":76,
			"subject":"undefined转换成布尔类型？",
			"answer":"true"
		},
		{
			"id":77,
			"subject":"非空字符串转换成布尔类型？",
			"answer":"true"
		},
		{
			"id":78,
			"subject":"空字符串转换成布尔类型？",
			"answer":"false"
		},
		{
			"id":79,
			"subject":"数学对象的方法有？",
			"answer":"①Math.max() ②Math.min() ③Math.round() ④Math.abs() ⑤Math.sqrt() ⑥Math.floor() ⑦Math.ceil() ⑧Math.random()"
		},
		{
			"id":80,
			"subject":"数学对象，去一组数的最大值",
			"answer":"Math.max()"
		},
		{
			"id":81,
			"subject":"数学对象，去一组数的最小值",
			"answer":"Math.min()"
		},
		{
			"id":82,
			"subject":"取随机数公式，不包含最大值、包含最小值",
			"answer":"Math.floor(Math.random() * (max - min))"
		},
		{
			"id":83,
			"subject":"取随机数公式，包含最大值、包含最小值",
			"answer":"Math.floor(Math.random() * (max - min + 1)) + min"
		},
		{
			"id":84,
			"subject":"创建数组的方法有？",
			"answer":"①字面量:[] ②构造函数：new Array(n) ***如果只有一个参数，这个参数就是数组长度"
		},
		{
			"id":85,
			"subject":"数组是一个对象吗？",
			"answer":"是"
		},
		{
			"id":86,
			"subject":"数学对象，四舍五入方法",
			"answer":"Math.round()"
		},
		{
			"id":87,
			"subject":"数学对象，返回数的绝对值",
			"answer":"Math.abs()"
		},
		{
			"id":88,
			"subject":"数学对象，返回数的平方根",
			"answer":"Math.sqrt()"
		},
		{
			"id":89,
			"subject":"数学对象，向下取整",
			"answer":"Math.floor()"
		},
		{
			"id":90,
			"subject":"数学对象，向上取整",
			"answer":"Math.ceil()"
		},
		{
			"id":91,
			"subject":"返回随机数",
			"answer":"Math.random()"
		},
		{
			"id":92,
			"subject":"Math.max()",
			"answer":"取一组数的最大值"
		},
		{
			"id":93,
			"subject":"Math.min()",
			"answer":"去一组数中最小值"
		},
		
		{
			"id":94,
			"subject":"Math.round()",
			"answer":"四舍五入"
		},
		{
			"id":95,
			"subject":"Math.abs()",
			"answer":"返回数的绝对值"
		},
		{
			"id":96,
			"subject":"Math.sqrt()",
			"answer":"返回数的平方根"
		},
		{
			"id":97,
			"subject":"Math.floor()",
			"answer":"向下取整"
		},
		{
			"id":98,
			"subject":"Math.cail()",
			"answer":"向上取整"
		},
		{
			"id":99,
			"subject":"Math.random()",
			"answer":"返回随机数，0-1，包括0，不包括1"
		},
		{
			"id":100,
			"subject":"数组的方法有",
			"answer":"①concat(数组名称,[])：合并数组 ②reverse:反转数组顺序 ③join(分隔符):将数组的元素组成一个字符串，用参数分隔符进行分割 ④push:将参数添加到数组尾部 pop:移除数组末尾最后一项 ⑤unshift:将参数添加到数组开头 shift:移除数组开头第一项 ⑥slice(参数1，参数2):截取 ⑦sort:按升序排列数组项 ⑧indexOf():查找 ⑨splice：可以实现删除、插入、替换操作"
		},
		{
			"id":101,
			"subject":"concat(数组名称,[])",
			"answer":"合并数组，最后返回一个新数组"
		},
		{
			"id":102,
			"subject":"reverse",
			"answer":"反转数组顺序，*会改变原来数组"
		},
		{
			"id":103,
			"subject":"join(分隔符)",
			"answer":"将数组的元素组成一个字符串，用参数分隔符进行分割，默认与逗号分割"
		},
		
		{
			"id":104, 
			"subject":"push()",
			"answer":"将参数添加到原数组末尾，并且返回数组的长度"
		},
		{
			"id":105,
			"subject":"pop()",
			"answer":"数组末尾移除最后一项，返回移除的项"
		},
		{
			"id":106,
			"subject":"unshift",
			"answer":"将参数添加到原数组的开头，并放回数组的长度"
		},
		{
			"id":107,
			"subject":"shift",
			"answer":"删除原数组的第一项，返回移除的项"
		},
		{
			"id":108,
			"subject":"slice(参数1，参数2)",
			"answer":"截取，返回新的数组,原数组不会发生改变：参数1：开始位置：参数2： 结束位置"
		},
		
		{
			"id":109,
			"subject":"sort",
			"answer":"按升序排列数组项"
		},
		{
			"id":110,
			"subject":"indexOf()",
			"answer":"查找，查找参数在数组中是否存在; 存在：返回下标，不存在：-1"
		},
		{
			"id":111,
			"subject":"splice",
			"answer":"删除：2个参数，（1，2）从小标1开始，删除2个；替换：3参数，（0，1，4）从下标0开始，到下标为1，中的所有值替换为4；插入：3个参数，（1，0，5）表示在下标为1处添加一项5"
		},
		{
			"id":112,
			"subject":"合并数组，最后返回一个新数组的方法",
			"answer":"数组名称.concat(数组名称,[])"
		},
		{
			"id":113,
			"subject":"反转数组顺序，*会改变原来数组的方法",
			"answer":"reverse()"
		},
		
		{
			"id":114,
			"subject":"将数组的元素组成一个字符串，用参数分隔符进行分割，默认与逗号分割的方法",
			"answer":"join()"
		},
		{
			"id":115,
			"subject":"将参数添加到原数组末尾，并且返回数组的长度的方法",
			"answer":"push()"
		},
		{
			"id":116,
			"subject":"数组末尾移除最后一项，返回移除的项的方法",
			"answer":"pop"
		},
		{
			"id":117,
			"subject":"将参数添加到原数组的开头，并放回数组的长度的方法",
			"answer":"unshift()"
		},
		{
			"id":118,
			"subject":"删除原数组的第一项，返回移除的项的方法",
			"answer":"shift"
		},
		
		{
			"id":119,
			"subject":"截取，返回新的数组,原数组不会发生改变的方法",
			"answer":"slice(参数1,参数2)"
		},
		{
			"id":120,
			"subject":"按升序排列数组项的数组方法",
			"answer":"sort()"
		},
		{
			"id":121,
			"subject":"查找，查找参数在数组中是否存在;存在：返回下标;不存在： -1",
			"answer":"indexOf()"
		},
		{
			"id":122,
			"subject":"可以实现删除、插入、替换操作的数组方法",
			"answer":"splice()"
		},
		{
			"id":123,
			"subject":"跳出语句有哪些",
			"answer":"①break ②continue ③return"
		},
		
		{
			"id":124,
			"subject":"break语义",
			"answer":"跳出当前语句"
		},
		{
			"id":125,
			"subject":"continue语义",
			"answer":"跳出当前循环，但继续执行当前循环"
		},
		{
			"id":126,
			"subject":"return语义",
			"answer":"返回，跳出当前函数体"
		},
		{
			"id":127,
			"subject":"跳出当前语句的语法",
			"answer":"break"
		},
		{
			"id":128,
			"subject":"跳出当前循环，但继续执行当前循环",
			"answer":"continue"
		},
		
		{
			"id":129,
			"subject":"返回，跳出当前函数体",
			"answer":"return"
		},
		{
			"id":130,
			"subject":"循环遍历数组的方法有",
			"answer":"①forEach() ②map()"
		},
		{
			"id":131,
			"subject":"map一般用来做什么",
			"answer":"循环遍历数组"
		},
		{
			"id":132,
			"subject":"forEach一般用来做什么",
			"answer":"循环遍历数组"
		},
		{
			"id":133,
			"subject":"filter",
			"answer":"过滤，返回新的数组"
		},
		{
			"id":134,
			"subject":"返回布尔值的数组方法",
			"answer":"①every：所有的为true，则返回true；一项为false，结果为false ②some：只要有一项返回为true，则结果返回为true"
		},
		{
			"id":135,
			"subject":"所有的为true，则返回true 的数组返回布尔值的方法",
			"answer":"every()"
		},
		{
			"id":136,
			"subject":"只要有一项返回为true，则结果返回为true的数组返回布尔值的方法",
			"answer":"some()"
		},
		{
			"id":137,
			"subject":"JS脚本延时加载的方法",
			"answer":"script type=text/javaScript defer /script"
		},
		{
			"id":138,
			"subject":"script type=text/javaScript defer /script 中的defer有什么意义",
			"answer":"js脚本可以延时到文档完全被解析和显示之后执行 简称：延时加载"
		},
		{
			"id":139,
			"subject":"JS脚本异步加载的方法",
			"answer":"script type=‘text/javascript async /script’"
		},
		{
			"id":140,
			"subject":"script type=text/javaScript async /script 中的async有什么意义",
			"answer":"立即执行脚本，但妨碍页面其他操作 简称：异步加载"
		},
		{
			"id":141,
			"subject":"创建字符串的方式有",
			"answer":"①字面量：let a = '你好' ②构造函数:let str = new String('你好')"
		},
		{
			"id":142,
			"subject":"字面量和构造函数创建的字符串的区别",
			"answer":"①字面量形式存储在栈内存，构造函数形式存储在堆内存 ②typeof 字面量 =》 string类型 typeof 构造函数 =》object类型"
		},
		{
			"id":143,
			"subject":"为什么字面量的string，boolean，number也有属性和方法",
			"answer":"①string，boolean，number也叫做原始的资料类型 ②new string,new boolean,new number 也叫做包装对象 ③之所以有属性和方法，是向包装对象借的"
		},
		{
			"id":144,
			"subject":"JS一切事物皆对象，对象拥有属性和方法",
			"answer":"JS一切事物皆对象，对象拥有属性和方法"
		},
		{
			"id":145,
			"subject":"字符串的方法有",
			"answer":"①charAt(数值)：返回指定位置的字符 ②indexOf():查找，有：返回下标，没有：-1 ③replace(把什么，替换成什么):替换 ④trim():去除前后空格 ⑤toLowerCase:把字符串转换成小写 ⑥toUpperCase:把字符转换成大写 ⑦split():字符串转换成数组 ⑧join():数组转换成字符串"
		},
		{
			"id":146,
			"subject":"字符串截取的方法有",
			"answer":"①slice(start,end):值可以有负数 ②substring(start,end):值不能有负数，负数转为0 ③substr(start,end):值可以有负数，工作用使用较多"
		},
		{
			"id":147,
			"subject":"字符串方法：返回指定位置的字符",
			"answer":"charAt(数值)"
		},
		{
			"id":148,
			"subject":"charAt(数值)",
			"answer":"字符串方法：返回指定位置的字符"
		},
		{
			"id":149,
			"subject":"字符串方法：查找",
			"answer":"indexOf()"
		},
		{
			"id":150,
			"subject":"indexOf()",
			"answer":"字符串方法：查找"
		},
		{
			"id":151,
			"subject":"字符串方法：替换",
			"answer":"replace(把什么，替换成什么)"
		},
		{
			"id":152,
			"subject":"replace(把什么，替换成什么)",
			"answer":"字符串方法：替换"
		},
		{
			"id":153,
			"subject":"字符串方法：去除前后空格",
			"answer":"trim()"
		},
		{
			"id":154,
			"subject":"字符串方法：把字符转换为小写",
			"answer":"toLowerCase"
		},
		{
			"id":155,
			"subject":"toLowerCase",
			"answer":"字符串方法：把字符转换为小写"
		},
		{
			"id":156,
			"subject":"字符串方法：把字符转换为大写",
			"answer":"toUpperCase"
		},
		{
			"id":157,
			"subject":"toUpperCase",
			"answer":"字符串方法：把字符转换为大写"
		},
		{
			"id":158,
			"subject":"字符串方法：字符串转换成数组",
			"answer":"split()"
		},
		{
			"id":159,
			"subject":"split()",
			"answer":"字符串方法：字符串转换成数组"
		},
		{
			"id":160,
			"subject":"字符串方法：数组转换成字符串",
			"answer":"join()"
		},
		{
			"id":161,
			"subject":"join()",
			"answer":"字符串方法：数组转换成字符串"
		},
		{
			"id":162,
			"subject":"slice",
			"answer":"字符串截取"
		},
		{
			"id":163,
			"subject":"substring",
			"answer":"字符串截取"
		},
		{
			"id":164,
			"subject":"substr",
			"answer":"字符串截取"
		},
		{
			"id":165,
			"subject":"操作浏览器窗口访问过的url 中的BOM方法是",
			"answer":"history"
		},
		{
			"id":166,
			"subject":"history 是什么方法",
			"answer":"BOM方法：操作浏览器窗口访问过的url"
		},
		{
			"id":167,
			"subject":"history: back",
			"answer":"返回上一页"
		},
		{
			"id":168,
			"subject":"history: forward",
			"answer":"前进下一页"
		},
		{
			"id":169,
			"subject":"history: go()",
			"answer":"前往指定页面，参数为数字"
		},
		{
			"id":170,
			"subject":"包含有关浏览器信息的BOM方法是",
			"answer":"navigator"
		},
		{
			"id":171,
			"subject":"navigator 是BOM中什么方法",
			"answer":"包含有关浏览器信息"
		},
		{
			"id":172,
			"subject":"获取浏览器用户代理头的值方法",
			"answer":"navigator: userAgent"
		},
		{
			"id":173,
			"subject":"navigator: userAgent",
			"answer":"获取浏览器用户代理头的值"
		},
		{
			"id":174,
			"subject":"返回用户浏览器为什么操作系统",
			"answer":"navigator: platform"
		},
		{
			"id":175,
			"subject":"navigator: platform",
			"answer":"返回用户浏览器为什么操作系统"
		},
		{
			"id":176,
			"subject":"获取客户端屏幕信息的BOM方法",
			"answer":"screen"
		},
		{
			"id":177,
			"subject":"screen 为什么BOM方法",
			"answer":"获取客户端屏幕信息"
		},
		{
			"id":178,
			"subject":"获取当前屏幕显示的宽度",
			"answer":"screen.width"
		},
		{
			"id":179,
			"subject":"screen.width",
			"answer":"获取当前屏幕显示的宽度"
		},
		{
			"id":180,
			"subject":"screen.height",
			"answer":"获取当前屏幕显示的高度"
		},
		{
			"id":181,
			"subject":"获取当前屏幕显示的宽度",
			"answer":"screen.height"
		},
		{
			"id":182,
			"subject":"BOM可以做什么",
			"answer":"①获取浏览器型号 ②操作url ③获取屏幕的大小尺寸"
		},
		{
			"id":183,
			"subject":"操作浏览器当前url的对象",
			"answer":"location"
		},
		{
			"id":184,
			"subject":"location 对象用来做什么",
			"answer":"操作浏览器当前url"
		},
		{
			"id":185,
			"subject":"location.href",
			"answer":"①可以获取本身的url ②可以设置对应跳转的url"
		},
		{
			"id":186,
			"subject":"decodeURIComponent()",
			"answer":"解码"
		},
		{
			"id":187,
			"subject":"JS单线程是什么意思",
			"answer":"指同一时间只能做一件事，这也就意味着，所有任务都需要排队，前一个任务执行结束，才可以继续执行下一个任务"
		},
		{
			"id":188,
			"subject":"js语言为什么是单线程",
			"answer":"取决于js用在什么地方，和用户相关"
		},
		{
			"id":189,
			"subject":"程序的运行流程",
			"answer":"①主线程（函数） ②事件队列（定时器，ajax）"
		},
		{
			"id":190,
			"subject":"函数执行环境的生命周期",
			"answer":"①创建阶段：生成变量对象，建立作用域链，确定this指向 ②执行阶段：变量赋值，函数调用，执行其他代码 ③回收机制"
		},
		{
			"id":191,
			"subject":"JS变量命名规范",
			"answer":" ①首字母：字母、$ ②严格区分大小写 ③采用驼峰命名（第一个单词开始之后，每个单词首字母大写）"
		},
		{
			"id":192,
			"subject":"公共JS注释",
			"answer":"/**  *文件用途说明  *作者性名  *制作时间  **/"
		},
		{
			"id":193,
			"subject":"大的JS模块注释方法",
			"answer":"//==========  //代码用途  //=========="
		},
		{
			"id":194,
			"subject":"JS循环的方法有哪些",
			"answer":"while和do...while"
		},
		{
			"id":195,
			"subject":"while语法格式",
			"answer":"while(条件|终止条件){循环值  步长值}"
		},
		{
			"id":196,
			"subject":"do...while语法格式",
			"answer":"do{循环体  步长值}while(条件|终止条件)"
		},
		{
			"id":197,
			"subject":"获取id节点方法",
			"answer":"document.getElementById('main')"
		},
		{
			"id":198,
			"subject":"获取标签名节点方法",
			"answer":"document.getElementsByTagName('li')"
		},
		{
			"id":199,
			"subject":"document.getElementById('main')",
			"answer":"获取id节点"
		},
		{
			"id":200,
			"subject":"document.getElementsByTagName('li')",
			"answer":"获取标签名节点方法;获取到的是一个集合：有length,有下标"
		},
		{
			"id":201,
			"subject":"获取class名节点",
			"answer":"document.getElementsByClassName('class名')"
		},
		{
			"id":202,
			"subject":"document.getElementsByClassName('class名')",
			"answer":"获取class名节点；获取到的是一个集合：有length,有下标； *这种方法很少用，会有兼容问题"
		},
		{
			"id":203,
			"subject":"通过选择器来获取一个节点",
			"answer":"document.querySelector()"
		},
		{
			"id":204,
			"subject":"document.querySelector",
			"answer":"通过选择器来获取一个节点"
		},
		{
			"id":205,
			"subject":"通过选择器来获取所有节点",
			"answer":"document.querySelectorAll()"
		},
		{
			"id":206,
			"subject":"document.querySelectorAll()",
			"answer":"通过选择器来获取所有节点；获取到的是一个集合：有length,有下标"
		},
		{
			"id":207,
			"subject":"给节点添加文本的属性有",
			"answer":"①innerHTML ②indexText *这个属性解析不了html标签"
		},
		{
			"id":208,
			"subject":"返回节点名称的属性",
			"answer":"nodeName"
		},
		{
			"id":209,
			"subject":"nodeName",
			"answer":"返回节点名称的属性，返回的标签为大写字母(DIV)  *用途：一般用来做判断"
		},
		{
			"id":210,
			"subject":"获取到第一个元素子节点的属性",
			"answer":"firstElementChild"
		},
		{
			"id":211,
			"subject":"firstElementChild",
			"answer":"获取到第一个元素子节点的属性"
		},
		{
			"id":212,
			"subject":"lastElementChild",
			"answer":"获取到最后一个元素子节点的属性"
		},
		{
			"id":213,
			"subject":"获取到最后一个元素子节点的属性",
			"answer":"lastElementChild"
		},
		{
			"id":214,
			"subject":"获取到父节点的属性",
			"answer":"parentNode"
		},
		{
			"id":215,
			"subject":"parentNode",
			"answer":"获取到父节点的属性"
		},
		{
			"id":216,
			"subject":"获取设置节点的class的属性",
			"answer":"className"
		},
		{
			"id":217,
			"subject":"className",
			"answer":"获取设置节点的class的属性"
		},
		{
			"id":218,
			"subject":"节点方法：获取",
			"answer":"节点对象.getAttribute('属性名称')"
		},
		{
			"id":219,
			"subject":"节点对象.getAttribute('属性名称')",
			"answer":"节点方法：获取"
		},
		{
			"id":220,
			"subject":"节点方法：设置",
			"answer":"节点对象.setAttribute('属性名称','对应值')"
		},
		{
			"id":221,
			"subject":"节点方法：删除",
			"answer":"节点对象.removeAttribute('属性名称')"
		},
		{
			"id":222,
			"subject":"节点对象.setAttribute('属性名称','对应值')",
			"answer":"节点方法：设置"
		},
		{
			"id":223,
			"subject":"节点对象.removeAttribute('属性名称')",
			"answer":"节点方法：删除"
		},
		{
			"id":224,
			"subject":"如何自定义属性名称",
			"answer":"data-xxx  例：data-title"
		},
		{
			"id":225,
			"subject":"当input输入框每输入一位值就会进行判断的事件为",
			"answer":"oninput"
		},
		{
			"id":226,
			"subject":"oninput为什么事件",
			"answer":"当input输入框每输入一位值就会进行判断"
		},
		{
			"id":227,
			"subject":"创建节点",
			"answer":"document.createElement('节点名称')"
		},
		{
			"id":228,
			"subject":"document.createElement('节点名称')",
			"answer":"创建节点"
		},
		{
			"id":229,
			"subject":"添加节点：前置（在前面添加）",
			"answer":"父节点.insetBefore('添加的节点','添加到谁的后面')"
		},
		{
			"id":230,
			"subject":"添加节点:追加（在后面添加）",
			"answer":"父节点.appendChild(子节点)"
		},
		{
			"id":231,
			"subject":"父节点.insetBefore('添加的节点','添加到谁的后面') 判断其作用",
			"answer":"添加节点：前置（在前面添加）"
		},
		{
			"id":232,
			"subject":"父节点.appendChild(子节点)判断其作用",
			"answer":"添加节点:追加（在后面添加）"
		},
		{
			"id":233,
			"subject":"删除节点",
			"answer":"父节点.removeChild(子节点)"
		},
		{
			"id":234,
			"subject":"父节点.removeChild(子节点)",
			"answer":"删除节点"
		},
		{
			"id":235,
			"subject":"获取样式表中样式",
			"answer":"getComputedStyle(节点,null).样式名称"
		},
		{
			"id":236,
			"subject":"getComputedStyle(节点,null).样式名称",
			"answer":"获取样式表中样式"
		},
		{
			"id":237,
			"subject":"获取元素大小（盒子的宽高）",
			"answer":"①节点对象.offsetWidth ②节点对象.offsetHeight"
		},
		{
			"id":238,
			"subject":"获取元素大小",
			"answer":"①节点对象.clientWidth ②节点对象.clientHeight"
		},
		{
			"id":239,
			"subject":"获取元素偏移位置",
			"answer":"①节点对象.offsetLeft ：从左到右 ②节点对象.offsetright ：从右到左"
		},
		{
			"id":240,
			"subject":"获取滚动条滚动距离的方法",
			"answer":"①节点对象.scrollLeft ②节点对象.scrollTop"
		},
		{
			"id":241,
			"subject":"①节点对象.scrollLeft ②节点对象.scrollTop 说出其作用",
			"answer":"获取滚动条滚动距离"
		},
		{
			"id":242,
			"subject":"节点对象.scrollLeft",
			"answer":"获取滚动条左右滚动距离"
		},
		{
			"id":243,
			"subject":"节点对象.scrollTop",
			"answer":"获取滚动条上下滚动距离"
		},
		{
			"id":244,
			"subject":"事件流解释",
			"answer":"事件执行的顺序"
		},
		{
			"id":245,
			"subject":"事件流分为哪几种",
			"answer":"①事件捕捉 ②事件冒泡"
		},
		{
			"id":246,
			"subject":"鼠标事件有：",
			"answer":"①onclick:单击事件 ②ondblclick:双击事件 ③oncontextmenu：右击事件 ④onmousedown:鼠标按下 ⑤onmouseup:鼠标释放 ⑥onmouseover:鼠标经过 ⑦onmouseout:鼠标离开 ⑧onmousemover:鼠标悬浮"
		},
		{
			"id":247,
			"subject":"鼠标单机事件",
			"answer":"onlick"
		},
		{
			"id":248,
			"subject":"onclick",
			"answer":"鼠标单击事件"
		},
		{
			"id":249,
			"subject":"鼠标双击事件",
			"answer":"ondblclick"
		},
		{
			"id":250,
			"subject":"ondblclick",
			"answer":"鼠标双击事件"
		},
		{
			"id":251,
			"subject":"鼠标右击事件",
			"answer":"oncontextmenu"
		},
		{
			"id":252,
			"subject":"鼠标右击事件",
			"answer":"oncontextmenu"
		},
		{
			"id":253,
			"subject":"鼠标按下事件",
			"answer":"onmousedown"
		},
		{
			"id":254,
			"subject":"onmousedown",
			"answer":"鼠标按下事件"
		},
		{
			"id":255,
			"subject":"鼠标释放事件",
			"answer":"onmouseup"
		},
		{
			"id":256,
			"subject":"onmouseup",
			"answer":"鼠标释放事件"
		},
		{
			"id":257,
			"subject":"鼠标经过事件",
			"answer":"onmouseover"
		},
		{
			"id":258,
			"subject":"鼠标离开事件",
			"answer":"onmouseout"
		},
		{
			"id":259,
			"subject":"onmouseout",
			"answer":"鼠标离开事件"
		},
		{
			"id":260,
			"subject":"鼠标悬浮事件",
			"answer":"onmousemove"
		},
		{
			"id":261,
			"subject":"onmousemove",
			"answer":"鼠标悬浮事件"
		},
		{
			"id":262,
			"subject":"键盘事件有：",
			"answer":"①onkeydown：鼠标按下 ②onkeyup：鼠标释放"
		},
		{
			"id":263,
			"subject":"鼠标按下事件",
			"answer":"onkeydown"
		},
		{
			"id":264,
			"subject":"onkeydown",
			"answer":"鼠标按下事件"
		},
		{
			"id":265,
			"subject":"鼠标释放事件",
			"answer":"onkeyup"
		},
		{
			"id":266,
			"subject":"onkeyup",
			"answer":"鼠标释放事件"
		},
		{
			"id":267,
			"subject":"键盘事件：获取键值方法",
			"answer":"function(e){e.keyCode}"
		},
		{
			"id":268,
			"subject":"阻止事件冒泡的方法",
			"answer":"事件对象.stopPropagation()"
		},
		{
			"id":269,
			"subject":"JS阻止默认行为的方法",
			"answer":"事件对象.preventDefault()"
		},
		{
			"id":270,
			"subject":"事件对象.stopPropagation() 是用来做什么",
			"answer":"阻止事件冒泡"
		},
		{
			"id":271,
			"subject":"事件对象.preventDefault() 是用来做什么",
			"answer":"阻止默认行为"
		},
		{
			"id":272,
			"subject":"正则表达式创建方法",
			"answer":"①字面量：//  ②构造函数：new RegExp() *可以在表达式中放入变量"
		},
		{
			"id":273,
			"subject":"正则表达式的方法有？",
			"answer":"①test():检测一个内容是否与正则匹配 =匹配：true =不匹配：false ②exec():检测一个内容是否正则匹配 =匹配返回：数组 =不匹配返回：null"
		},
		{
			"id":274,
			"subject":"test() 是什么方法",
			"answer":"检测一个内容是否与正则匹配 =匹配：true =不匹配：false"
		},
		{
			"id":275,
			"subject":"exec() 是什么方法",
			"answer":"检测一个内容是否与正则匹配 =匹配：返回数组 =不匹配：null"
		},
		{
			"id":276,
			"subject":"正则中的元字符 第一个组",
			"answer":"①[]：匹配中括号中的任意一个字符 ②[^abc]：除了中括号内任意一个字符 ③[0-9]：匹配数字0-9范围的任意一个数字 ④. :匹配除换行符以外的任意字符"
		},
		{
			"id":277,
			"subject":"正则中的元字符 第二组",
			"answer":"①左斜杠d：匹配数字 左斜杠D：匹配非数组 ②左斜杠w：匹配数字，字母，下划线=[0-9a-zA-Z_] 左斜杠W：匹配非数字，字母，下划线 ③左斜杠s：匹配空格 左斜杠S：匹配非空格 ④左斜杠b：匹配边界 左斜杠B：匹配非边界"
			
		},
		{
			"id":278,
			"subject":"正则中的转义符",
			"answer":"/"
		},
		{
			"id":288,
			"subject":"正则中‘/’符号有何意义",
			"answer":"转义，让他本身失去他本身的意义"
		},
		{
			"id":289,
			"subject":"正则中的选择符",
			"answer":"|：或"
		},
		{
			"id":290,
			"subject":"正则中‘|’符号有何意义",
			"answer":"或"
		},
		{
			"id":291,
			"subject":"正则中修饰符有",
			"answer":"①i：不区分大小写 ②g：全文匹配 ③m（不常用）：执行多行匹配"
		},
		{
			"id":292,
			"subject":"正则中的限定符",
			"answer":"①^：开始 ②$：结束"
		},
		{
			"id":293,
			"subject":"正则中的分组",
			"answer":"()：把部分内容结合在一起"
		},
		{
			"id":294,
			"subject":"‘作用域’名词解释",
			"answer":"作用的区域或者作用的范围"
		},
		{
			"id":295,
			"subject":"全局作用域为：",
			"answer":"window"
		},
		{
			"id":286,
			"subject":"‘作用域链’名词解释",
			"answer":"从内部向外链；从当前作用域开始找，如果找不到向外作用域找，当找到返回"
		}
	]
}
